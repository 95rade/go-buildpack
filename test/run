#!/usr/bin/env bash
# See README.md for info on running these tests.


testDetectGodepBinFile() {
  detect "godep-bin-file"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepBinFile() {
  compile "godep-bin-file"
  assertCapturedError 1 "File bin exists and is not a directory."
}

testDetectGovendorMissingRootPath() {
  detect "govendor-missing-rootPath"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGovendorMissingRootPath() {
  compile "govendor-missing-rootPath"
  assertCapturedError 1 "The 'rootPath' field is not specified in 'vendor/vendor.json'."
}

testDetectGovendorMalformed() {
  detect "govendor-malformed"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGovendorMalformed() {
  compile "govendor-malformed"
  assertCapturedError 1 "Bad vendor/vendor.json file"
}

testDetectGodepMalformed() {
  detect "godep-malformed"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepMalformed() {
  compile "godep-malformed"
  assertCapturedError 1 "Bad Godeps/Godeps.json file"

}

testDetectGBVendor() {
  detect "gb-vendor"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGBVendor() {
  compile "gb-vendor"
  assertCaptured "Installing go"
  assertCaptured "GB support is in beta"
  assertCaptured "Installing GB"
  assertCaptured "Running: gb build -tags heroku"
  assertCaptured "cmd/fixture"
  assertCaptured "Post Compile Cleanup"
  assertCapturedSuccess
  assertCompileBinaryExists
}

testDetectGBBasic() {
  detect "gb-basic"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGBBasic() {
  compile "gb-basic"
  assertCaptured "Installing go"
  assertCaptured "GB support is in beta"
  assertCaptured "Installing GB"
  assertCaptured "Running: gb build -tags heroku"
  assertCaptured "cmd/fixture"
  assertCaptured "Post Compile Cleanup"
  assertCapturedSuccess
  assertCompileBinaryExists
}

testDetectGodepLDSymbolValue() {
  detect "godep-ld-symbol-value"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepLDSymbolValue() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "main.fixture" > "${env_dir}/GO_LINKER_SYMBOL"
  echo "fixture" > "${env_dir}/GO_LINKER_VALUE"
  compile "godep-ld-symbol-value" ${cache} ${env_dir}
  assertCaptured "Running: go install -v -tags heroku -ldflags -X main.fixture=fixture ."
  assertCapturedSuccess
  assertCompileBinaryExists
  assertTrue "Binary has the right value" '[ "$(${compile_dir}/bin/fixture)" = "fixture" ]'
}

# Older versions of Go have a different format for specifying linked flags
testDetectGodepLDSymbolGo14Value() {
  detect "godep-ld-symbol-value-go14"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepLDSymbolGo14Value() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "main.fixture" > "${env_dir}/GO_LINKER_SYMBOL"
  echo "fixture" > "${env_dir}/GO_LINKER_VALUE"
  compile "godep-ld-symbol-value-go14" ${cache} ${env_dir}
  assertCaptured "Running: godep go install -v -tags heroku -ldflags -X main.fixture fixture ."
  assertCaptured "Deprecated or unsupported version of go"
  assertCapturedSuccess
  assertCompileBinaryExists
  assertTrue "Binary has the right value" '[ "$(${compile_dir}/bin/fixture)" = "fixture" ]'
}

testDetectGodepBasic() {
  detect "godep-basic"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepBasic() {
  compile "godep-basic"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompileBinaryExists
}

testDetectGovendorBasic() {
  detect "govendor-basic"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGovendorBasic() {
  compile "govendor-basic"
  assertCaptured "Checking vendor/vendor.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompileBinaryExists
}

testDetectGodepOldWorkspace() {
  detect "godep-old-workspace"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepOldWorkspace() {
  compile "godep-old-workspace"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: godep go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompileBinaryExists
}

testDetectGodepVendor() {
  detect "godep-vendor"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepVendor() {
  compile "godep-vendor"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompileBinaryExists
}

testDetectGodepPackageSpec() {
  detect "godep-package-spec"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepPackageSpec() {
  compile "godep-package-spec"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ./cmd/..."
  assertNotCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture/cmd/fixture"
  assertCapturedSuccess
  assertCompileBinaryExists
}

# Utils

pushd $(dirname 0) >/dev/null
popd >/dev/null

source $(pwd)/test/utils

mktmpdir() {
  dir=$(mktemp -t testXXXXX)
  rm -rf $dir
  mkdir $dir
  echo $dir
}

detect() {
  capture $(pwd)/bin/detect $(pwd)/test/fixtures/$1
}

compile_dir=""

default_process_types_cleanup() {
  file="/tmp/default_process_types"
  if [ -f "$file" ]; then
    rm "$file"
  fi
}

compile() {
  default_process_types_cleanup
  bp_dir=$(mktmpdir)
  compile_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${2:-$(mktmpdir)} $3
}

compileDir() {
  default_process_types_cleanup

  local bp_dir=$(mktmpdir)
  local compile_dir=${1:-$(mktmpdir)}
  local cache_dir=${2:-$(mktmpdir)}
  local env_dir=$3

  cp -a $(pwd)/* ${bp_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${cache_dir} ${env_dir}
}

release() {
  bp_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  capture ${bp_dir}/bin/release ${bp_dir}/test/fixtures/$1
}

assertFile() {
  assertEquals "$1" "$(cat ${compile_dir}/$2)"
}

assertCompileBinaryExists() {
  assertTrue "Compiled binary exists" "[ -x ${compile_dir}/bin/fixture ]"
}

source $(pwd)/test/shunit2